openapi: 3.0.1
info:
  title: |
    Sample integrations for Pull Approach
  version: "1.0"

tags:
  - name: "DWS Sorting"
    description: |
      Below explains flow and examples of the expected enpoints that customer should implement to integrate with DWS Sorting system.

      ![Workflow Diagram](./examples/pull_approach_examples/images/sorting.drawio.svg)

  - name: "Pack"
    description: |
      Below explains flow and examples of the expected enpoints that customer should implement to integrate with e-motions e-seal pack machine.

      ![Workflow Diagram](./examples/pull_approach_examples/images/pack-eseal.drawio.svg)

paths:
  /picklists:
    get:
      tags:
        - Pack
        - Pick
      summary: Returns a picklist by relevant parameters
      parameters:
        - name: reference
          in: query
          description: "Can for example be a picking cart id or a picking cart location or a box on automation depending on process and intergration"
          style: form
          schema:
            type: string
        - name: pickListStatusFrom
          in: query
          description: ""
          style: form
          schema:
            type: string
        - name: pickListStatusTo
          in: query
          description: ""
          style: form
          schema:
            type: string
        - name: pickListTypes
          in: query
          description: ""
          style: form
          schema:
            type: array
            items:
              type: string
        - name: packageTypes
          in: query
          description: ""
          style: form
          schema:
            type: array
            items:
              type: string
        - name: includedZones
          in: query
          description: ""
          style: form
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/EmotionsPickListResponse"
            application/json:
              schema:
                $ref: "#/components/schemas/EmotionsPickListResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/EmotionsPickListResponse"
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorModel"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  /picklists/{picklistId}/assign-box:
    patch:
      tags:
        - Pick
        - Pack
      summary: Assign a box to a picklist
      description: |
        This can be used to assign a box to a picklist.
        If the box is already assigned to a picklist, this will update the box assignment.
      parameters:
        - name: boxId
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              type: integer
          text/json:
            schema:
              type: string
          application/*+json:
            schema:
              type: string
      responses:
        "200":
          description: Success
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorModel"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  /picklists/{picklistId}/pick-list-status:
    patch:
      tags:
        - Pick
        - Pack
      summary: Update pick list status number
      description: |
        This can be used to inform Host that a picklist need to be put aside and error handled.
      parameters:
        - name: picklistId
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              type: integer
          text/json:
            schema:
              type: string
          application/*+json:
            schema:
              type: string
      responses:
        "200":
          description: Success
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorModel"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  /picklines/{picklineId}:
    patch:
      tags:
        - Pick
      summary: Picks a specifict pickline
      parameters:
        - name: picklineId
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              type: integer
              format: int32
          text/json:
            schema:
              type: integer
              format: int32
          application/*+json:
            schema:
              type: integer
              format: int32
      responses:
        "200":
          description: Success
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorModel"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorModel"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorModel"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  /picklists/images:
    patch:
      tags:
        - Transport
      summary: Uploads an image that is tied to a picklist
      parameters:
        - name: picklineId
          in: query
          description: ""
          style: form
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmotionsImageRequest"
          text/json:
            schema:
              $ref: "#/components/schemas/EmotionsImageRequest"
          application/*+json:
            schema:
              $ref: "#/components/schemas/EmotionsImageRequest"
      responses:
        "200":
          description: Success
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorModel"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorModel"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorModel"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  /goodsitems/update-dimensions:
    patch:
      tags:
        - Transport
      summary: Updates the dimensions of a goodsitem with a specific boxId
      parameters:
        - name: boxId
          in: query
          description: ""
          style: form
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmotionsGoodsItemDimensionPatchModel"
          text/json:
            schema:
              $ref: "#/components/schemas/EmotionsGoodsItemDimensionPatchModel"
          application/*+json:
            schema:
              $ref: "#/components/schemas/EmotionsGoodsItemDimensionPatchModel"
      responses:
        "200":
          description: Success
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorModel"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorModel"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  /picklists/pack:
    post:
      tags:
        - Pack
      summary: Packs the order, books the consignment and print carrierlabel for a picklist on specified printer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                printerNode:
                  type: string
                  description: Site physical identifier.
                articleItemIds:
                  type: array
                  items:
                    type: object
                    properties:
                      articleItemId:
                        type: string
                      quantityToPack:
                        type: integer
      responses:
        "200":
          description: Success
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ErrorModel"
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
            text/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
  /parcel-at-sorting:
    post:
      tags:
        - "DWS Sorting"
      summary: Save parcel information and get sorting information back
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                location:
                  type: string
                  description: Site physical identifier.
                barcode:
                  type: string
                  description: Chosen barcode on parcel
                length:
                  type: number
                  format: float
                  description: Length in meter.
                width:
                  type: number
                  format: float
                  description: Width in meter.
                height:
                  type: number
                  format: float
                  description: Height in meter.
                volume:
                  type: number
                  format: float
                  description: Volume in cubic meter.
                weight:
                  type: number
                  format: float
                  description: Weight in kilogram.
            examples:
              ex1:
                summary: Example 1, parcel with proper barcode
                value:
                  location: "Sorting1"
                  barcode: "1Z2F4E126822306480"
                  length: 0.6
                  width: 0.4
                  height: 0.12
                  volume: 0.0288
                  weight: 1
              ex2:
                summary: Example 2, parcel with no-read
                value:
                  location: "Sorting1"
                  barcode: "NoRead"
                  length: 0
                  width: 0
                  height: 0
                  volume: 0
                  weight: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  sortingParameters:
                    type: object
                    description: Sorting parameters.
                  id:
                    type: string
                    description: An identifier for parcel that can be commnuicated in "save-image" and "parcel-arrive".
              examples:
                ex1:
                  summary: Example 1
                  value:
                    sortingParameters:
                      contryCode: "SE"
                      postcode: "64201"
                      transporter: "Schenker"
                      transporterService: "Express"
                    id: "1Z2F4E126822306480"
        "400":
          description: ERROR
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                      message:
                        type: string
              examples:
                ex1:
                  summary: Example Error
                  value:
                    error:
                      code: "SortError_12345"
                      message: "error message"

  /save-image:
    post:
      tags:
        - "DWS Sorting"
      summary: Save image (Optional)
      description: |
        **Optional**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                location:
                  type: string
                  description: Site physical identifier.
                id:
                  type: string
                  description: An identifier for parcel, recived in "parcel-at-sorting" response.
                imagePayload:
                  type: string
                  format: byte
                  description: Jpeg image as base64 encoded string
            examples:
              ex1:
                summary: Example 1
                value:
                  location: "Sorting1"
                  id: "1Z2F4E126822306480"
                  imagePayload: 
      responses:
        "200":
          description: OK

  /parcel-arrive:
    post:
      tags:
        - "DWS Sorting"
      summary: Confirm arrival at destination (Optional)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                location:
                  type: string
                  description: Site physical identifier.
                id:
                  type: string
                  description: An identifier for parcel, recived in "parcel-at-sorting" response.
                laneId:
                  type: string
                  description: Lane where parcel just arrived.
                cageId:
                  type: string
                  description: cage identifier.
            examples:
              ex1:
                summary: Example 1
                value:
                  location: "Sorting1"
                  id: "1Z2F4E126822306480"
                  laneId: "3"
                  cageId: "Cage12345"
      responses:
        "200":
          description: OK
components:
  schemas:
    EmotionsGoodsItemDimensionPatchModel:
      type: object
      properties:
        weight:
          type: number
          format: double
          description: "In kg"
        length:
          type: number
          format: double
          description: "In meter"
        width:
          type: number
          format: double
          description: "In meter"
        height:
          type: number
          format: double
          description: "In meter"
      additionalProperties: false
    EmotionsImageRequest:
      type: object
      properties:
        base64Image:
          type: string
          nullable: true
        fileName:
          type: string
          nullable: true
        imageTypeName:
          type: string
          nullable: true
      additionalProperties: false
    EmotionsPickLineResponse:
      type: object
      properties:
        pickLineId:
          type: integer
          format: int32
          description: "Host primary key"
        articleNumber:
          type: string
          nullable: true
          description: "Customer article number"
        articleId:
          type: string
          nullable: true
          description: "Host primary key"
        articleDescription:
          type: string
          nullable: true
          description: "Article description"
        barcodes:
          type: array
          items:
            type: string
          nullable: true
          description: "Associated barcodes"
        imageUrl:
          type: string
          nullable: true
          description: "URL to image of article"
        unitWeight:
          type: number
          format: double
          description: "Weight of one unit in kg"
        articleItems:
          type: array
          items:
            type: object
            properties:
              articleItemId:
                type: string
                nullable: true
                description: "Host primary key"
              hardwareLocationReference:
                type: string
                format: double
                description: "A reference key to the location in emotions system"
              quantityPicked:
                type: number
                format: double
              quantityToPick:
                type: number
                format: double
              pickFromLocation:
                type: string
                nullable: true
                description: "Host Pick from location"
              pickFromZone:
                type: string
                nullable: true
                description: "Host Pick from zone"
              currentLocation:
                type: string
                nullable: true
                description: "Current location"
              pickSequence:
                type: number
                format: integer
                nullable: true
                description: "If pick sequence is used, this is the sequence number"
      additionalProperties: false
    EmotionsPickListResponse:
      type: array
      items:
        type: object
        properties:
          pickListId:
            type: integer
            format: int32
          pickListStatus:
            type: integer
            format: string
          pickLines:
            type: array
            items:
              $ref: "#/components/schemas/EmotionsPickLineResponse"
            nullable: true
      additionalProperties: false
    Error:
      type: object
      properties:
        message:
          type: string
          nullable: true
        code:
          type: integer
          format: int32
      additionalProperties: false
    ErrorModel:
      type: object
      properties:
        message:
          type: string
          nullable: true
        code:
          type: integer
          format: int32
      additionalProperties: false
